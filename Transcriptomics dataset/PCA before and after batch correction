---
title: "PCA-non parametric batch correction"
author: "Roshan Shafiha"
date: "6/12/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

load the required libraries 

```{r}
library(limma)
library(GEOquery)
library(dplyr)
library(DESeq2)
library(edgeR)
library(tibble)
library(gplots)
library(devtools)
library(ggbiplot)
library(sva)
library(conflicted)
conflict_prefer("select", "dplyr")
```

## Including Plots

load the data

```{r pressure, echo=T}

data1 <- getGEO('GSE89632')
gse1 <- data1[[1]]
sampleInfo_1 <- pData(gse1)
anno1 <- fData(gse1)
expression_data1 <- as.data.frame(exprs(gse1))
rownames(expression_data1) = make.names(anno1$Symbol, unique=TRUE)

boxplot(expression_data1)
summary(expression_data1)

```


Preprocess the data to obtain the control and the NAFLD sample

```{r}

sampleInfo1 <- select(sampleInfo_1,characteristics_ch1.1,geo_accession)

sampleInfo1$characteristics_ch1.1<- gsub(sampleInfo1$characteristics_ch1.1, pattern = "diagnosis:", replacement = "")

sampleInfo1<-sampleInfo1[sampleInfo1$characteristics_ch1.1 != " NASH", ] 

steatosis_samples1<-rownames(sampleInfo1)

expression_data1<-expression_data1[ , (names(expression_data1) %in% steatosis_samples1)]


```

load the GSE151158

```{r}


data2 <- getGEO('GSE151158')
gse2 <- data2[[1]]
sampleInfo_2 <- pData(gse2)
anno2 <- fData(gse2)
expression_data2 <- as.data.frame(exprs(gse2))

boxplot(expression_data2)
summary(expression_data2)


```

Get the sample info 

```{r}

sampleInfo2 <- select(sampleInfo_2,source_name_ch1,geo_accession)

sampleInfo2$source_name_ch1<- gsub(".*_","",sampleInfo2$source_name_ch1)

blank<- c("GSM4567481","GSM4567482","GSM4567483","GSM4567484","GSM4567485")

sampleInfo2<-sampleInfo2[!(row.names(sampleInfo2) %in% blank),]


steatosis_samples2<-rownames(sampleInfo2)

expression_data2<-expression_data2[ , (names(expression_data2) %in% steatosis_samples2)]

count=expression_data2

dge <- DGEList(counts=count)

expression_data2 <- cpm(dge, log=TRUE, prior.count=3)

boxplot(expression_data2)
summary(expression_data2)

```


load the dataset GSE58979

```{r}
data3 <- getGEO('GSE58979')
gse3 <- data3[[1]]
sampleInfo_3 <- pData(gse3)
expression_data3 <- as.data.frame(exprs(gse3))
anno3 <- fData(gse3)
rownames(expression_data3) = make.names(anno3$`Gene Symbol`,unique = T)

boxplot(expression_data3)
summary(expression_data3)


```


preprocess the dataset

```{r}

sampleInfo3 <- select(sampleInfo_3,source_name_ch1,geo_accession)

sampleInfo3$source_name_ch1<-gsub(".*,","",sampleInfo3$source_name_ch1)

sampleInfo3<-sampleInfo3[sampleInfo3$source_name_ch1 != " Histology class 3" & sampleInfo3$source_name_ch1 != " Histology class 4", ]

steatosis_samples<-rownames(sampleInfo3)

expression_data3<-expression_data3[ , (names(expression_data3) %in% steatosis_samples)]

```


load the dataset

```{r}

data4 <- getGEO('GSE63067')
gse4 <- data4[[1]]
sampleInfo_4 <- pData(gse4)
expression_data4 <- as.data.frame(exprs(gse4))
anno4 <- fData(gse4)
rownames(expression_data4) = make.names(anno4$`Gene Symbol`,unique = T)

boxplot(expression_data4)
summary(expression_data4)


```


prepare the metadata

```{r}

sampleInfo4 <- select(sampleInfo_4,source_name_ch1,geo_accession)

sampleInfo4$source_name_ch1<-gsub(".*,","",sampleInfo4$source_name_ch1)

sampleInfo4<-sampleInfo4[sampleInfo4$source_name_ch1 != " non-alcoholic steatohepatitis", ] 

steatosis_samples4<-rownames(sampleInfo4)

expression_data4<-expression_data4[ , (names(expression_data4) %in% steatosis_samples4)]


```


extract the common genes between these dataset

```{r}
genes_data1<-rownames(expression_data1)

genes_data2<-rownames(expression_data2)

genes_data3<-rownames(expression_data3)

genes_data4<-rownames(expression_data4)



intersected_genes<-Reduce(intersect, list(genes_data1,genes_data2,genes_data3,genes_data4))

head(intersected_genes)

```


```{r}
gene_exp_data1<-expression_data1[ (rownames(expression_data1) %in% intersected_genes), ]

gene_exp_data2<-expression_data2[ (rownames(expression_data2) %in% intersected_genes), ]

gene_exp_data3<-expression_data3[ (rownames(expression_data3) %in% intersected_genes), ]

gene_exp_data4<-expression_data4[ (rownames(expression_data4) %in% intersected_genes), ]

```


Conduct PCA before batch correction 

Prepare the dataset for PCA 

```{r}

gene_exp_data1<-as.data.frame(t(gene_exp_data1))

gene_exp_data1<-add_column(gene_exp_data1, sample = sampleInfo1$characteristics_ch1.1,.before = 'SPP1')

gene_exp_data2<-as.data.frame(t(gene_exp_data2))

gene_exp_data2<-add_column(gene_exp_data2, sample =sampleInfo2$source_name_ch1,.before = 'SPP1')

gene_exp_data3<-as.data.frame(t(gene_exp_data3))

gene_exp_data3<-add_column(gene_exp_data3, sample = sampleInfo3$source_name_ch1,.before = 'SPP1')

gene_exp_data4<-as.data.frame(t(gene_exp_data4))

gene_exp_data4<-add_column(gene_exp_data4, sample =sampleInfo4$source_name_ch1,.before = 'SPP1')


```

```{r}
group1<-replicate(ncol(expression_data1), 'GSE89632')

gene_exp_data1<-add_column(gene_exp_data1, group=group1, .before = "SPP1")

group2<-replicate(ncol(expression_data2), 'GSE151158')

gene_exp_data2<-add_column(gene_exp_data2, group=group2, .before = "SPP1")

group3<-replicate(ncol(expression_data3), 'GSE58979')

gene_exp_data3<-add_column(gene_exp_data3, group=group3, .before = "SPP1")

group4<-replicate(ncol(expression_data4), 'GSE63067')

gene_exp_data4<-add_column(gene_exp_data4, group=group4, .before = "SPP1")


PCA_no_batch_correction <- do.call("rbind", list(gene_exp_data1, gene_exp_data2, gene_exp_data3 ,gene_exp_data4))

drop <- c('sample','group')


```


PCA- before batch correction 


```{r}

pca_plot <- prcomp(PCA_no_batch_correction[,!(names(PCA_no_batch_correction) %in% drop)], center = TRUE,scale. = TRUE)


df_not_corrected <- as.data.frame(pca_plot$x)
df_not_corrected$Group <- PCA_no_batch_correction$group

percentage_notcorrected <- round(pca_plot$sdev / sum(pca_plot$sdev) * 100, 2)
percentage_notcorrected <- paste( colnames(df_not_corrected), "(", paste( as.character(percentage_notcorrected), "%", ")", sep="") )


theme<-theme(panel.background = element_blank(),text = element_text(size = 20),plot.title = element_text(hjust = 0.5),panel.border=element_rect(fill=NA),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),strip.background=element_blank(),axis.text.x=element_text(colour="black"),axis.text.y=element_text(colour="black"),axis.ticks=element_line(colour="black"),plot.margin=unit(c(1,1,1,1),"line"))

p_bf_batch<-ggplot(df_not_corrected,aes(x=PC1,y=PC2,color=Group ))
p_bf_batch<-p_bf_batch+geom_point(shape=19, size=5)+theme+ xlab(percentage_notcorrected [1]) + ylab(percentage_notcorrected [2])+ggtitle("PCA plot before batch correction")+scale_color_brewer(palette="Set1")

print(p_bf_batch)
```

Conduct the batch correction

preprocess the data 

```{r}

#Drop the sample and the group

edata_batch_correction<-PCA_no_batch_correction[,!(names(PCA_no_batch_correction) %in% drop)]

edata_batch_correction<-t(edata_batch_correction)

#prepare the batch data 

batch1<-as.data.frame(replicate(nrow(gene_exp_data1), '1'))

colnames(batch1)<-c("batch")

batch2<-as.data.frame(replicate(nrow(gene_exp_data2), '2'))

colnames(batch2)<-c("batch")

batch3<-as.data.frame(replicate(nrow(gene_exp_data3), '3'))

colnames(batch3)<-c("batch")

batch4<-as.data.frame(replicate(nrow(gene_exp_data4), '4'))

colnames(batch4)<-c("batch")

batch_data<-do.call("rbind", list(batch1, batch2,batch3,batch4))

batch_data$geo <- PCA_no_batch_correction$group


```


batch correction

```{r}
combat_edata = ComBat(dat=edata_batch_correction, batch=batch_data$batch, mod=NULL,  par.prior=FALSE,mean.only=TRUE)

summary(combat_edata)
boxplot(combat_edata)
```


perform the PCA

```{r}
pre_pca<-t(combat_edata)

pca_batch_corrected <- prcomp(pre_pca, center = TRUE,scale. = TRUE)


#for ggplot we have to edit the PCA dataset

df_out <- as.data.frame(pca_batch_corrected$x)
df_out$Group <- PCA_no_batch_correction$group

percentage <- round(pca_batch_corrected$sdev / sum(pca_batch_corrected$sdev) * 100, 2)
percentage <- paste( colnames(df_out), "(", paste( as.character(percentage), "%", ")", sep="") )


theme<-theme(panel.background = element_blank(),text = element_text(size = 20),plot.title = element_text(hjust = 0.5),panel.border=element_rect(fill=NA),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),strip.background=element_blank(),axis.text.x=element_text(colour="black"),axis.text.y=element_text(colour="black"),axis.ticks=element_line(colour="black"),plot.margin=unit(c(1,1,1,1),"line"))

plot_PCA<-ggplot(df_out,aes(x=PC1,y=PC2,color=Group ))
plot_PCA<-plot_PCA+geom_point(shape=19, size=5)+theme+ xlab(percentage[1]) + ylab(percentage[2])+ggtitle("PCA plot after batch correction")+scale_color_brewer(palette="Set1")

print(plot_PCA)

```

Prepare the data for random forest

```{r}
feature_data<-pre_pca

feature_data<-as.data.frame(feature_data)

sample=PCA_no_batch_correction$sample

group=PCA_no_batch_correction$group

feature_data=add_column(feature_data, sample = PCA_no_batch_correction$sample,.before = 'SPP1')

steatosis<-c(" SS","NAS5","NAS3"," Histology class 1"," Histology class 2"," steatosis")

feature_data$sample[feature_data$sample %in% steatosis] <- 'steatosis'

CTRL<-c(" healthy"," HC")

feature_data$sample[feature_data$sample %in% CTRL] <- 'CTRL'

write.csv(feature_data,'features.csv')

```


















